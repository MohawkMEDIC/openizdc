<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenIZ.Core.Model</name>
    </assembly>
    <members>
        <member name="T:OpenIZ.Core.Model.Acts.Act">
            <summary>
            Represents the base class for an act
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Act.#ctor">
            <summary>
            Constructor for ACT
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.IsNegated">
            <summary>
            Gets or sets an indicator which identifies whether the object is negated
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.ActTime">
            <summary>
            Gets or sets the stop time of the act
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.ActTimeXml">
            <summary>
            Gets or sets the creation time in XML format
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.StartTime">
            <summary>
            Gets or sets the start time of the act
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.StartTimeXml">
            <summary>
            Gets or sets the creation time in XML format
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.StopTime">
            <summary>
            Gets or sets the stop time of the act
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.StopTimeXml">
            <summary>
            Gets or sets the creation time in XML format
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.ClassConceptKey">
            <summary>
            Class concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.MoodConceptKey">
            <summary>
            Mood concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.ReasonConceptKey">
            <summary>
            Reason concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.StatusConceptKey">
            <summary>
            Status concept id
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.TypeConceptKey">
            <summary>
            Type concept identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.ClassConcept">
            <summary>
            Class concept datal load property
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.MoodConcept">
            <summary>
            Mood concept data load property
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.ReasonConcept">
            <summary>
            Mood concept data load property
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.StatusConcept">
            <summary>
            Status concept id
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.TypeConcept">
            <summary>
            Type concept identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.Identifiers">
            <summary>
            Gets the identifiers associated with this act
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.Relationships">
            <summary>
            Gets a list of all associated acts for this act
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.Extensions">
            <summary>
            Gets a list of all extensions associated with the act
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.Notes">
            <summary>
            Gets a list of all notes associated with the act
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.Tags">
            <summary>
            Gets a list of all tags associated with the act
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.Participations">
            <summary>
            Participations
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Act.Refresh">
            <summary>
            Forces the delay load properties in this type to reload
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.ActParticipation">
            <summary>
            Associates an entity which participates in an act
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActParticipation.#ctor">
            <summary>
            Default constructor for act participation
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActParticipation.#ctor(System.Nullable{System.Guid},OpenIZ.Core.Model.Entities.Entity)">
            <summary>
            Act participation relationship between <paramref name="source"/> and <paramref name="player"/>
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActParticipation.#ctor(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Entity relationship between <paramref name="source"/> and <paramref name="playerKey"/>
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActParticipation.PlayerEntityKey">
            <summary>
            Gets or sets the target entity reference
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActParticipation.ParticipationRoleKey">
            <summary>
            Gets or sets the participation role key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActParticipation.PlayerEntity">
            <summary>
            Gets or sets the entity which participated in the act
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActParticipation.ParticipationRole">
            <summary>
            Gets or sets the role that the entity played in participating in the act
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActParticipation.Refresh">
            <summary>
            Forces a delay load from the underlying model
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.ActRelationship">
            <summary>
            Act relationships
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActRelationship.#ctor">
            <summary>
            Default constructor for entity relationship
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActRelationship.#ctor(System.Nullable{System.Guid},OpenIZ.Core.Model.Acts.Act)">
            <summary>
            Entity relationship between <paramref name="source"/> and <paramref name="target"/>
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActRelationship.#ctor(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Entity relationship between <paramref name="source"/> and <paramref name="target"/>
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActRelationship.TargetActKey">
            <summary>
            The target of the association
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActRelationship.TargetAct">
            <summary>
            Target act reference
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActRelationship.RelationshipTypeKey">
            <summary>
            Association type key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActRelationship.RelationshipType">
            <summary>
            Gets or sets the association type
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActRelationship.Refresh">
            <summary>
            Refreshes the model to force reload from underlying model
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.ControlAct">
            <summary>
            Represents an act which indicates why data was created/changed
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ControlAct.#ctor">
            <summary>
            Control act
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.Observation">
            <summary>
            Represents a class which is an observation
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Observation.#ctor">
            <summary>
            Observation ctor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Observation.InterpretationConceptKey">
            <summary>
            Gets or sets the interpretation concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Observation.InterpretationConcept">
            <summary>
            Gets or sets the concept which indicates the interpretation of the observtion
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Observation.Refresh">
            <summary>
            Refresh the object forcing delay load 
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.QuantityObservation">
            <summary>
            Represents an observation that contains a quantity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.QuantityObservation.Value">
            <summary>
            Gets or sets the observed quantity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.QuantityObservation.UnitOfMeasureKey">
            <summary>
            Gets or sets the key of the uom concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.QuantityObservation.UnitOfMeasure">
            <summary>
            Gets or sets the unit of measure
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.QuantityObservation.Refresh">
            <summary>
            Forces a refresh of the object
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.TextObservation">
            <summary>
            Represents an observation with a text value
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.TextObservation.Value">
            <summary>
            Gets or sets the textual value
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.CodedObservation">
            <summary>
            Represents an observation with a concept value
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.CodedObservation.ValueKey">
            <summary>
            Gets or sets the key of the uom concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.CodedObservation.Value">
            <summary>
            Gets or sets the coded value of the observation
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.CodedObservation.Refresh">
            <summary>
            Forces a refresh of underlying data
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.PatientEncounter">
            <summary>
            Represents an encounter a patient has with the health system
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.PatientEncounter.#ctor">
            <summary>
            Patient encounter ctor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.PatientEncounter.DischargeDispositionKey">
            <summary>
            Gets or sets the key of discharge disposition
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.PatientEncounter.DischargeDisposition">
            <summary>
            Gets or sets the discharge disposition (how the patient left the encounter
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.PatientEncounter.Refresh">
            <summary>
            Refresh forcing delay load
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.SubstanceAdministration">
            <summary>
            Represents an act whereby a substance is administered to the patient
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.SubstanceAdministration.#ctor">
            <summary>
            Substance administration ctor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.SubstanceAdministration.RouteKey">
            <summary>
            Gets or sets the key for route
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.SubstanceAdministration.DoseUnitKey">
            <summary>
            Gets or sets the key for dosing unit
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.SubstanceAdministration.Route">
            <summary>
            Gets or sets a concept which indicates the route of administration (eg: Oral, Injection, etc.)
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.SubstanceAdministration.DoseUnit">
            <summary>
            Gets or sets a concept which indicates the unit of measure for the dose (eg: 5 mL, 10 mL, 1 drop, etc.)
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.SubstanceAdministration.DoseQuantity">
            <summary>
            Gets or sets the amount of substance administered
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.SubstanceAdministration.SequenceId">
            <summary>
            The sequence of the dose (i.e. OPV 0 = 0 , OPV 1 = 1, etc.)
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.SubstanceAdministration.Refresh">
            <summary>
            Force delay loading of properties
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Attributes.AutoLoadAttribute">
            <summary>
            Auto load attribute
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Attributes.ClassifierAttribute">
            <summary>
            Classifier attribute used to mark a class' classifier
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Attributes.ClassifierAttribute.#ctor(System.String)">
            <summary>
            Classifier attribute property
            </summary>
            <param name="classProperty"></param>
        </member>
        <member name="P:OpenIZ.Core.Model.Attributes.ClassifierAttribute.ClassifierProperty">
            <summary>
            Gets or sets the classifier property
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Attributes.DataIgnoreAttribute">
            <summary>
            Identifies that a property containins no meaningful data 
            and is provided only for serialization
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Attributes.KeyLookupAttribute">
            <summary>
            Identifies to the persistence layer what property can be used for lookup when a key is not present
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Attributes.KeyLookupAttribute.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Attributes.KeyLookupAttribute.UniqueProperty">
            <summary>
            Gets or sets whether the persistence engine should throw an exception when persisting duplicates
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Attributes.SerializationReferenceAttribute">
            <summary>
            Identifies where tools can find the serialization information
            for an ignored property
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Attributes.SerializationReferenceAttribute.#ctor(System.String)">
            <summary>
            The redirection attribute
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Attributes.SerializationReferenceAttribute.RedirectProperty">
            <summary>
            Identifies where the serialization information can be found
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Attributes.SimpleValueAttribute">
            <summary>
            Identifies the simple value
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Attributes.SimpleValueAttribute.#ctor(System.String)">
            <summary>
            Classifier attribute property
            </summary>
            <param name="valueProperty"></param>
        </member>
        <member name="P:OpenIZ.Core.Model.Attributes.SimpleValueAttribute.ValueProperty">
            <summary>
            Gets or sets the classifier property
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.BaseEntityData">
            <summary>
            Represents the root of all model classes in the OpenIZ Core
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.BaseEntityData.#ctor">
            <summary>
            Constructs a new base entity data
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.BaseEntityData.CreationTime">
            <summary>
            Creation Time
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.BaseEntityData.CreationTimeXml">
            <summary>
            Gets or sets the creation time in XML format
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.BaseEntityData.ObsoletionTime">
            <summary>
            Obsoletion time
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.BaseEntityData.ObsoletionTimeXml">
            <summary>
            Gets or sets the creation time in XML format
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.BaseEntityData.CreatedBy">
            <summary>
            Gets or sets the user that created this base data
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.BaseEntityData.ModifiedOn">
            <summary>
            Get the modified on time
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.BaseEntityData.ShouldSerializeCreatedByKey">
            <summary>
            True if key should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.BaseEntityData.ShouldSerializeObsoletedByKey">
            <summary>
            True if key should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenIZ.Core.Model.BaseEntityData.ObsoletedBy">
            <summary>
            Gets or sets the user that obsoleted this base data
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.BaseEntityData.CreatedByKey">
            <summary>
            Gets or sets the created by identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.BaseEntityData.ObsoletedByKey">
            <summary>
            Gets or sets the obsoleted by identifier
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.BaseEntityData.ToString">
            <summary>
            Represent the data as a string
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.BaseEntityData.Refresh">
            <summary>
            Clears delay load properties forcing a refresh
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Association`1">
            <summary>
            Represents a bse class for bound relational data
            </summary>
            <typeparam name="TSourceType"></typeparam>
        </member>
        <member name="P:OpenIZ.Core.Model.Association`1.ModifiedOn">
            <summary>
            Get the modification date
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Association`1.SourceEntityKey">
            <summary>
            Gets or sets the source entity's key (where the relationship is FROM)
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Association`1.SourceEntity">
            <summary>
            The entity that this relationship targets
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Association`1.Refresh">
            <summary>
            Force delay load properties to reload
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Collection.Bundle">
            <summary>
            Represents a collection of model items 
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Collection.Bundle.m_bundleContents">
            <summary>
            Represents bundle contents
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Collection.Bundle.ModifiedOn">
            <summary>
            Gets the time the bundle was modified
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Collection.Bundle.Item">
            <summary>
            Gets or sets items in the bundle
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Collection.Bundle.EntryKey">
            <summary>
            Entry into the bundle
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Collection.Bundle.Entry">
            <summary>
            Gets the entry object
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Collection.Bundle.Offset">
            <summary>
            Gets or sets the count in this bundle
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Collection.Bundle.Count">
            <summary>
            Gets or sets the count in this bundle
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Collection.Bundle.TotalResults">
            <summary>
            Gets or sets the total results
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Collection.Bundle.CreateBundle(OpenIZ.Core.Model.IdentifiedData)">
            <summary>
            Create a bundle
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Collection.Bundle.CreateBundle(System.Collections.Generic.IEnumerable{OpenIZ.Core.Model.IdentifiedData},System.Int32,System.Int32)">
            <summary>
            Create a bundle
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Collection.Bundle.Reconstitute">
            <summary>
            Reconstitutes the bundle (takes the flat reference structures and fills them out into proper object references)
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Collection.Bundle.Reconstitute(OpenIZ.Core.Model.IdentifiedData)">
            <summary>
            Re-constitute the data
            </summary>
            <remarks>Basically this will find any refs and fill them in</remarks>
        </member>
        <member name="M:OpenIZ.Core.Model.Collection.Bundle.ProcessModel(OpenIZ.Core.Model.IdentifiedData,OpenIZ.Core.Model.Collection.Bundle,System.Boolean)">
            <summary>
            Packages the objects into a bundle
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ActClassKeys">
            <summary>
            Represents a series of class keys for use on acts
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.SubstanceAdministration">
            <summary>
            The act represents a substance administration
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.Condition">
            <summary>
            The act represetns a condition
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.Registration">
            <summary>
            The act represents a registration
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.Observation">
            <summary>
            The act represents a procedure
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.Inform">
            <summary>
            The act represents an informational act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.Encounter">
            <summary>
            The act represents an encounter
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.Battery">
            <summary>
            The act represents a simple battery of procedures/administrations/etc
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.Act">
            <summary>
            Generic act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.Procedure">
            <summary>
            The act represents a procedure (something done to a patient)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.CareProvision">
            <summary>
            The act represents some provision of care
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.AccountManagement">
            <summary>
            The act represents generic account management
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.Supply">
            <summary>
            The act represents a supply of some material
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.ControlAct">
            <summary>
            Control act event
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ActMoodKeys">
            <summary>
            Act Mood keys
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActMoodKeys.Goal">
            <summary>
            The ACT represents some sort of GOAL
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActMoodKeys.AppointmentRequest">
            <summary>
            The ACT represents a special type of request to create an appointment
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActMoodKeys.Appointment">
            <summary>
            The ACT represents an appointment that was made to do something
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActMoodKeys.Promise">
            <summary>
            The ACT represents a promise to do something
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActMoodKeys.Request">
            <summary>
            The ACT represents a request to do something
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActMoodKeys.Eventoccurrence">
            <summary>
            The ACT represents something that has occurred
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActMoodKeys.Intent">
            <summary>
            The ACT represents an intent made by a human to do something
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActMoodKeys.Propose">
            <summary>
            The ACT represents a proposal that a human should do something
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActMoodKeys.Definition">
            <summary>
            The ACT represents a definition of a type of act
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ActParticipationKey">
            <summary>
            Represents the participation concepts which an entity can participate in an act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Transcriber">
            <summary>
            The person who transcribed data from the original act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.EntryLocation">
            <summary>
            The location where the act was entered
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Location">
            <summary>
            The location where the service was performed
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.SecondaryPerformer">
            <summary>
            The secondary performing person (support clinician)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.IndirectTarget">
            <summary>
            The entity not directly present in the act but which will be the focust of th act
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys">
            <summary>
            Act relationship types
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.RefersTo">
            <summary>
            Indicates that the source act refers to the target act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.Arrival">
            <summary>
            Links the transortation act from another act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.Departure">
            <summary>
            Links a transporation act from another act indicating departure of the subject
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.Evaluates">
            <summary>
            Used to link a goal to an observation
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.HasControlVariable">
            <summary>
            Relationship from an act to one or more control variables (for example: device settings, or environment)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.Documents">
            <summary>
            The source act documents the target act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.HasSupport">
            <summary>
            Indicates an existing act is suggesting evidence for a new observation.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.EpisodeLink">
            <summary>
            Links two instances of the same act over time (example: chronic conditions)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.Replaces">
            <summary>
            The source act replaces the target act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.IsManfestationOf">
            <summary>
            The assertion that a new observation may be a manifestation of another
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.Appends">
            <summary>
            Indicates that the source act appends information contained in the target act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.HasSubject">
            <summary>
            Indicates the subject of a particular act (example: clinical act is a subject of a control act)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.Fulfills">
            <summary>
            Indicates that the source act fulfills the target act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.IsDerivedFrom">
            <summary>
            Indicates the source act is derived from information contained in the target act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.IsCauseOf">
            <summary>
            Indicates that the source act is the cause of the target act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.IsExcerptOf">
            <summary>
            Indicates that the source act is an excerpt of the target act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.HasComponent">
            <summary>
            Indicates that the target act is a component of the source act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.StartsAfterStartOf">
            <summary>
            Indicates that the source act starts after the start of another act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.HasPrecondition">
            <summary>
            Indicates that the target act is a pre-condition of the source act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.HasReason">
            <summary>
            Indicates a reasoning as to why the source act is occurring
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.HasAuthorization">
            <summary>
            Indicates that the target act authorizes the source act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.HasReferenceValues">
            <summary>
            Indicates that the source act contains reference values from the target
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.Transforms">
            <summary>
            Indicates that the source act transforms the target act
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.AddressUseKeys">
            <summary>
            Address use keys
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.AddressComponentKeys">
            <summary>
            Represents address component types
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.CodeSystemKeys">
            <summary>
            Code system identifiers
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.ISO6391">
            <summary>
            ISO-639-1
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.ICD10CM">
            <summary>
            ICD-10 CM
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.UCUM">
            <summary>
            UCUM
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.ICD9">
            <summary>
            ICD9
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.LOINC">
            <summary>
            LOINC
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.ICD10">
            <summary>
            ICD10
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.ISO6392">
            <summary>
            ISO639-2
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.SNOMEDCT">
            <summary>
            SNOMED-CT
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.CVX">
            <summary>
            Parse CVX
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ConceptClassKeys">
            <summary>
            Concept classification identifiers
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.ClassCode">
            <summary>
            Class code identifier
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Diagnosis">
            <summary>
            Diagnosis class code identifier
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Finding">
            <summary>
            Finding class identifier
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Material">
            <summary>
            Material class identifier
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Mood">
            <summary>
            Mood class identifier
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Other">
            <summary>
            Other class identifier
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Problem">
            <summary>
            Problem class identifier
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Relationship">
            <summary>
            Relationship class identifier
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Route">
            <summary>
            Route class identifier
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Status">
            <summary>
            Status class identifier
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Stock">
            <summary>
            Stock class identifier
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.UnitOfMeasure">
            <summary>
            Unit of measure identifier
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ConceptRelationshipTypeKeys">
            <summary>
            Reference type identifiers
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptRelationshipTypeKeys.SameAs">
            <summary>
            Same as relationship
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptRelationshipTypeKeys.NegationOf">
            <summary>
            Negation of 
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptRelationshipTypeKeys.MemberOf">
            <summary>
            Member of
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptRelationshipTypeKeys.InverseOf">
            <summary>
            Inverse of
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ConceptSetKeys">
            <summary>
            Represents concept set identifiers
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.ActClass">
            <summary>
            Act Classiciation
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.ActInterpretation">
            <summary>
            Act interpretation
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.ActMood">
            <summary>
            Act mood
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.ActRelationshipType">
            <summary>
            Act relationship type
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.ActStatus">
            <summary>
            Act status
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.AddressComponentType">
            <summary>
            Address component type
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.AddressUse">
            <summary>
            Address use id
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.AdministrativeGenderCode">
            <summary>
            Administrative gender code
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.ConceptStatus">
            <summary>
            Concept status 
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.EntityClass">
            <summary>
            Entity classifications
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.EntityRelationshipType">
            <summary>
            Entity relationships
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.EntityStatus">
            <summary>
            Entity status identifiers
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.IndustryCode">
            <summary>
            Entity industry codes
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.NameUse">
            <summary>
            Entity user identifiers
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.ServiceCode">
            <summary>
            Entity service codes
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.TelecomAddressType">
            <summary>
            Telecom address type
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.TelecomAddressUse">
            <summary>
            Telecom address use
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.FamilyMember">
            <summary>
            Family members
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.DeterminerKeys">
            <summary>
            Determiner codes
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.DeterminerKeys.DescribedQualified">
            <summary>
            QUALIFIEDKIND
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.DeterminerKeys.Specific">
            <summary>
            instance
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.DeterminerKeys.Described">
            <summary>
            Described
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.EntityClassKeys">
            <summary>
            Entity class concept keys
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Entity">
            <summary>
            Entity
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.ManufacturedMaterial">
            <summary>
            Manufactured material
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Animal">
            <summary>
            Animal
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Place">
            <summary>
            Place
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Device">
            <summary>
            Device
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Organization">
            <summary>
            Organization
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Food">
            <summary>
            Food
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Material">
            <summary>
            Material
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Person">
            <summary>
            Person
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.CityOrTown">
            <summary>
            City or town
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.ChemicalSubstance">
            <summary>
            Chemical Substance
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.State">
            <summary>
            State
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Container">
            <summary>
            Container
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.LivingSubject">
            <summary>
            Living Subject
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Patient">
            <summary>
            Patient
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.ServiceDeliveryLocation">
            <summary>
            Service delivery location
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Provider">
            <summary>
            Service delivery location
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.CountyOrParish">
            <summary>
            County or parish
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Country">
            <summary>
            Country or nation
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.NonLivingSubject">
            <summary>
            Non living subject
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys">
            <summary>
            Base entity relationship type keys
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.NameUseKeys">
            <summary>
            Name use keys
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.NameComponentKeys">
            <summary>
            Name component type keys
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.PhoneticAlgorithmKeys">
            <summary>
            Phonetic algorithm keys
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.StatusKeys">
            <summary>
            Concept identifiers
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.StatusKeys.New">
            <summary>
            Status - New
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.StatusKeys.Obsolete">
            <summary>
            Status - Obsolete
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.StatusKeys.Nullfied">
            <summary>
            Status - Nullified
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.StatusKeys.Active">
            <summary>
            Status - Active
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.TelecomAddressUseKeys">
            <summary>
            Telecommunications address use keys
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.TelecomAddressUseKeys.WorkPlace">
            <summary>
            For use in the workplace
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.TelecomAddressUseKeys.EmergencyContact">
            <summary>
            Emergency contact
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.TelecomAddressUseKeys.TemporaryAddress">
            <summary>
            temporary contact
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.TelecomAddressUseKeys.AnsweringService">
            <summary>
            answering service
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.TelecomAddressUseKeys.Pager">
            <summary>
            pager
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.TelecomAddressUseKeys.Public">
            <summary>
            public (800 number example) contact
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.TelecomAddressUseKeys.MobileContact">
            <summary>
            Mobile phone contact
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.UserClassKeys">
            <summary>
            Represents user classification keys
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.UserClassKeys.ApplictionUser">
            <summary>
            Represents a user which is an application
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.UserClassKeys.HumanUser">
            <summary>
            Represents a user which is a human
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.UserClassKeys.SystemUser">
            <summary>
            Represents a user which is a system user
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.AssigningAuthority">
            <summary>
            Represents a model class which is an assigning authority
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.AssigningAuthority.#ctor">
            <summary>
            Assigning authority
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.AssigningAuthority.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new assigning authority 
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.AssigningAuthority.Name">
            <summary>
            Gets or sets the name of the assigning authority
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.AssigningAuthority.DomainName">
            <summary>
            Gets or sets the domain name of the assigning authority
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.AssigningAuthority.Description">
            <summary>
            Gets or sets the description of the assigning authority
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.AssigningAuthority.Oid">
            <summary>
            Gets or sets the oid of the assigning authority
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.AssigningAuthority.Url">
            <summary>
            The URL of the assigning authority
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.AssigningAuthority.AssigningDeviceKey">
            <summary>
            Assigning device identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.AssigningAuthority.AssigningDevice">
            <summary>
            Gets or sets the assigning device
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.AssigningAuthority.Refresh">
            <summary>
            Force reloading of delay load properties
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.CodeSystem">
            <summary>
            Represents a code system which is a collection of reference terms
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.CodeSystem.#ctor">
            <summary>
            Creates a new code system
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.CodeSystem.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new code system object
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.CodeSystem.Name">
            <summary>
            Gets or sets the name of the code system
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.CodeSystem.Oid">
            <summary>
            Gets or sets the Oid of the code system
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.CodeSystem.Authority">
            <summary>
            Gets or sets the authority of the code system
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.CodeSystem.ObsoletionReason">
            <summary>
            Gets or sets the obsoletion reason of the code system
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.CodeSystem.Url">
            <summary>
            Gets or sets the URL of the code system
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.CodeSystem.VersionText">
            <summary>
            Gets or sets the version text of the code system
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.CodeSystem.Description">
            <summary>
            Gets or sets the human description
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.Concept">
            <summary>
            A class representing a generic concept used in the OpenIZ datamodel
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.Concept.#ctor">
            <summary>
            Creates a new concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.IsSystemConcept">
            <summary>
            Gets or sets an indicator which dictates whether the concept is a system concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.Mnemonic">
            <summary>
            Gets or sets the unchanging mnemonic for the concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.StatusConceptKey">
            <summary>
            Gets or sets the status concept key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.StatusConcept">
            <summary>
            Gets or sets the status of the concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.Relationship">
            <summary>
            Gets a list of concept relationships
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.ClassKey">
            <summary>
            Gets or sets the class identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.Class">
            <summary>
            Gets or sets the classification of the concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.ReferenceTerms">
            <summary>
            Gets a list of concept reference terms
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.ConceptNames">
            <summary>
            Gets the concept names
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.ConceptSetsXml">
            <summary>
            Concept sets as identifiers for XML purposes only
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.ConceptSets">
            <summary>
            Gets concept sets to which this concept is a member
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ConceptClass">
            <summary>
            Identifies a classification for a concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptClass.Name">
            <summary>
            Gets or sets the name of the concept class
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptClass.Mnemonic">
            <summary>
            Gets or sets the mnemonic
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ConceptName">
            <summary>
            Represents a name (human name) that a concept may have
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptName.Language">
            <summary>
            Gets or sets the language code of the object
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptName.Name">
            <summary>
            Gets or sets the name of the reference term
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptName.PhoneticCode">
            <summary>
            Gets or sets the phonetic code of the reference term
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptName.PhoneticAlgorithmKey">
            <summary>
            Gets or sets the identifier of the phonetic code
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptName.PhoneticAlgorithm">
            <summary>
            Gets or sets the phonetic algorithm
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ConceptName.Refresh">
            <summary>
            Refresh the object's delay load properties
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm">
            <summary>
            Represents a reference term relationship between a concept and reference term
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm.ReferenceTermKey">
            <summary>
            Gets or sets the reference term identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm.ReferenceTerm">
            <summary>
            Gets or set the reference term
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm.RelationshipTypeKey">
            <summary>
            Gets or sets the relationship type identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm.RelationshipType">
            <summary>
            Gets or sets the relationship type
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm.Refresh">
            <summary>
            Refresh the specified object
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ConceptRelationship">
            <summary>
            Represents a relationship between two concepts
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptRelationship.TargetConceptKey">
            <summary>
            Gets or sets the target concept identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptRelationship.TargetConcept">
            <summary>
            Gets or sets the target concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptRelationship.RelationshipTypeKey">
            <summary>
            Relationship type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptRelationship.RelationshipType">
            <summary>
            Gets or sets the relationship type
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ConceptRelationship.Refresh">
            <summary>
            Force reloading of delay load properties
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ConceptRelationshipType">
            <summary>
            Concept relationship type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptRelationshipType.Name">
            <summary>
            Gets or sets the name of the relationship
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptRelationshipType.Mnemonic">
            <summary>
            The invariant of the relationship type
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ConceptSet">
            <summary>
            Represents set of concepts
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ConceptSet.#ctor">
            <summary>
            Concept set
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptSet.Name">
            <summary>
            Gets or sets the name of the concept set
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptSet.Mnemonic">
            <summary>
            Gets or sets the mnemonic for the concept set (used for convenient lookup)
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptSet.Oid">
            <summary>
            Gets or sets the oid of the concept set
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptSet.Url">
            <summary>
            Gets or sets the url of the concept set
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptSet.ConceptsXml">
            <summary>
            Concepts as identifiers for XML purposes only
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptSet.Concepts">
            <summary>
            Gets the concepts in the set
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptSet.ObsoletionReason">
            <summary>
            Gets or sets the obsoletion reason
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.DatePrecision">
            <summary>
            Represents a date precision object
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.Extension`1">
            <summary>
            Represents a base entity extension
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Extension`1.ExtensionValue">
            <summary>
            Gets or sets the value of the extension
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Extension`1.ExtensionDisplay">
            <summary>
            Gets or sets an extension displayable value
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Extension`1.ExtensionTypeKey">
            <summary>
            Gets or sets the extension type key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Extension`1.ExtensionType">
            <summary>
            Gets or sets the extension type
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.Extension`1.Refresh">
            <summary>
            Forces refresh 
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.EntityExtension">
            <summary>
            Extension bound to entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityExtension.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityExtension.#ctor(System.Guid,System.Byte[])">
            <summary>
            Creates an entity extension
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ActExtension">
            <summary>
            Act extension
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ActExtension.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ActExtension.#ctor(System.Guid,System.Byte[])">
            <summary>
            Creates an entity extension
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ExtensionType">
            <summary>
            Instructions on how an extensionshould be handled
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ExtensionType.#ctor">
            <summary>
            Extension type ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ExtensionType.#ctor(System.String,System.Type)">
            <summary>
            Creates  a new extension type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ExtensionType.ExtensionHandler">
            <summary>
            Gets or sets the extension handler
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ExtensionType.ExtensionHandlerXml">
            <summary>
            Gets or sets the description
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ExtensionType.Name">
            <summary>
            Gets or sets the description
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ExtensionType.IsEnabled">
            <summary>
            Whether the extension is enabled
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.EntityIdentifier">
            <summary>
            Entity identifiers
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityIdentifier.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityIdentifier.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new entity identifier with specified authority
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityIdentifier.#ctor(OpenIZ.Core.Model.DataTypes.AssigningAuthority,System.String)">
            <summary>
            Creates a new entity identifier
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ActIdentifier">
            <summary>
            Act identifier
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ActIdentifier.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ActIdentifier.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new entity identifier with specified authority
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ActIdentifier.#ctor(OpenIZ.Core.Model.DataTypes.AssigningAuthority,System.String)">
            <summary>
            Creates a new entity identifier
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.IdentifierBase`1">
            <summary>
            Represents an external assigned identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.IdentifierBase`1.Value">
            <summary>
            Gets or sets the value of the identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.IdentifierBase`1.AuthorityKey">
            <summary>
            Gets or sets the assinging authority id
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.IdentifierBase`1.IdentifierTypeKey">
            <summary>
            Gets or sets the type identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.IdentifierBase`1.IdentifierType">
            <summary>
            Gets or sets the identifier type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.IdentifierBase`1.Authority">
            <summary>
            Gets or sets the assigning authority 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.IdentifierBase`1.Refresh">
            <summary>
            Force reloading of delay load properties
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.IdentifierType">
            <summary>
            Represents a basic information class which classifies the use of an identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.IdentifierType.ScopeConceptKey">
            <summary>
            Gets or sets the id of the scope concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.IdentifierType.TypeConceptKey">
            <summary>
            Gets or sets the concept which identifies the type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.IdentifierType.TypeConcept">
            <summary>
            Type concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.IdentifierType.ScopeConcept">
            <summary>
            Gets the scope of the identifier
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.IdentifierType.Refresh">
            <summary>
            Force reloading of delay load properties
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.Note`1">
            <summary>
            Generic note class
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.Note`1.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.Note`1.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new instance of the entity note
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Note`1.Text">
            <summary>
            Gets or sets the note text
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Note`1.AuthorKey">
            <summary>
            Gets or sets the author key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Note`1.Author">
            <summary>
            Gets or sets the author entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.Note`1.Refresh">
            <summary>
            Forces a refresh of the object
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.EntityNote">
            <summary>
            Represents a note attached to an entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityNote.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityNote.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new instance of the entity note
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ActNote">
            <summary>
            Represents a note attached to an entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ActNote.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ActNote.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new instance of the entity note
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm">
            <summary>
            Represents a phonetic algorithm record in the model
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm.EmptyAlgorithm">
            <summary>
            Gets the phonetic algorithm which is the "empty" algorithm
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm.Name">
            <summary>
            Gets the name of the phonetic algorithm
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm.Handler">
            <summary>
            Gets the handler (or generator) for the phonetic algorithm
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ReferenceTerm">
            <summary>
            Represents a basic reference term
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTerm.Mnemonic">
            <summary>
            Gets or sets the mnemonic for the reference term
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTerm.CodeSystem">
            <summary>
            Gets or sets the code system 
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTerm.CodeSystemKey">
            <summary>
            Gets or sets the code system identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTerm.DisplayNames">
            <summary>
            Gets display names associated with the reference term
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ReferenceTerm.Refresh">
            <summary>
            Force reloading of delay load properties
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ReferenceTermName">
            <summary>
            Display name of a code system or reference term
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTermName.ReferenceTermKey">
            <summary>
            Back-reference to reference term
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTermName.Language">
            <summary>
            Gets or sets the language code of the object
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTermName.Name">
            <summary>
            Gets or sets the name of the reference term
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTermName.PhoneticCode">
            <summary>
            Gets or sets the phonetic code of the reference term
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTermName.PhoneticAlgorithmKey">
            <summary>
            Gets or sets the identifier of the phonetic code
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTermName.PhoneticAlgorithm">
            <summary>
            Gets or sets the phonetic algorithm
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ReferenceTermName.Refresh">
            <summary>
            Force reloading of delay load properties
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.Tag`1">
            <summary>
            Represents the base class for tags
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Tag`1.TagKey">
            <summary>
            Gets or sets the key of the tag
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Tag`1.Value">
            <summary>
            Gets or sets the value of the tag
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Tag`1.SourceEntityKey">
            <summary>
            Gets or sets the source entity's key (where the relationship is FROM)
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Tag`1.SourceEntity">
            <summary>
            The entity that this relationship targets
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.EntityTag">
            <summary>
            Represents a tag associated with an entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityTag.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityTag.#ctor(System.String,System.String)">
            <summary>
            Construtor setting key and tag
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ActTag">
            <summary>
            Represents a tag on an act
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ActTag.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ActTag.#ctor(System.String,System.String)">
            <summary>
            Construtor setting key and tag
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.UserEntity">
            <summary>
            Represents a user entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.UserEntity.SecurityUserKey">
            <summary>
            Gets or sets the security user key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.UserEntity.SecurityUser">
            <summary>
            Gets or sets the security user key
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.ApplicationEntity">
            <summary>
            An associative entity which links a SecurityApplication to an Entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.ApplicationEntity.#ctor">
            <summary>
            Creates application entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.ApplicationEntity.SecurityApplicationKey">
            <summary>
            Gets or sets the security application
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.ApplicationEntity.SecurityApplication">
            <summary>
            Gets or sets the security application
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.ApplicationEntity.SoftwareName">
            <summary>
            Gets or sets the name of the software
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.ApplicationEntity.VersionName">
            <summary>
            Gets or sets the version of the software
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.ApplicationEntity.VendorName">
            <summary>
            Gets or sets the vendoer name of the software
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.ApplicationEntity.Refresh">
            <summary>
            Force delay loading
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.DeviceEntity">
            <summary>
            Represents a device entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.DeviceEntity.#ctor">
            <summary>
            Device entity ctor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.DeviceEntity.SecurityDeviceKey">
            <summary>
            Gets or sets the security device key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.DeviceEntity.SecurityDevice">
            <summary>
            Gets or sets the security device
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.DeviceEntity.ManufacturedModelName">
            <summary>
            Gets or sets the manufacturer model name
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.DeviceEntity.OperatingSystemName">
            <summary>
            Gets or sets the operating system name
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.DeviceEntity.Refresh">
            <summary>
            Force refresh of data model
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.Entity">
            <summary>
            Represents the base of all entities
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Entity.#ctor">
            <summary>
            Creates a new instance of the entity class
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.ClassConceptKey">
            <summary>
            Class concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.DeterminerConceptKey">
            <summary>
            Determiner concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.StatusConceptKey">
            <summary>
            Status concept id
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.CreationActKey">
            <summary>
            Creation act reference
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.TypeConceptKey">
            <summary>
            Type concept identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.ClassConcept">
            <summary>
            Class concept datal load property
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.DeterminerConcept">
            <summary>
            Determiner concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.StatusConcept">
            <summary>
            Status concept id
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.CreationAct">
            <summary>
            Creation act reference
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.TypeConcept">
            <summary>
            Type concept identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.Identifiers">
            <summary>
            Gets the identifiers associated with this entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.Relationships">
            <summary>
            Gets a list of all associated entities for this entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.Telecoms">
            <summary>
            Gets a list of all telecommunications addresses associated with the entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.Extensions">
            <summary>
            Gets a list of all extensions associated with the entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.Names">
            <summary>
            Gets a list of all names associated with the entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.Addresses">
            <summary>
            Gets a list of all addresses associated with the entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.Notes">
            <summary>
            Gets a list of all notes associated with the entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.Tags">
            <summary>
            Gets a list of all tags associated with the entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.Participations">
            <summary>
            Gets the acts in which this entity participates
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.EntityAddress">
            <summary>
            Entity address
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityAddress.#ctor(System.Guid,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create the address from components
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityAddress.#ctor">
            <summary>
            Default CTOR
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityAddress.AddressUseKey">
            <summary>
            Gets or sets the address use key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityAddress.AddressUse">
            <summary>
            Gets or sets the address use
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityAddress.Component">
            <summary>
            Gets or sets the component types
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.EntityAddressComponent">
            <summary>
            A single address component
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityAddressComponent.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new address component type.
            </summary>
            <param name="componentType"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityAddressComponent.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.EntityName">
            <summary>
            Represents a name for an entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityName.#ctor(System.Guid,System.String,System.String[])">
            <summary>
            Creates a new name
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityName.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new simple name
            </summary>
            <param name="nameUse"></param>
            <param name="name"></param>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityName.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityName.NameUseKey">
            <summary>
            Gets or sets the name use key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityName.NameUse">
            <summary>
            Gets or sets the name use
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityName.Component">
            <summary>
            Gets or sets the component types
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityName.Refresh">
            <summary>
            Refreshes the underlying content
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.EntityNameComponent">
            <summary>
            Represents a name component which is bound to a name
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityNameComponent.#ctor">
            <summary>
            Entity name component 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityNameComponent.#ctor(System.String)">
            <summary>
            Creates the entity name component with the specified value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityNameComponent.#ctor(System.Guid,System.String)">
            <summary>
            Creates the entity name component with the specified value and part type classifier
            </summary>
            <param name="partTypeKey"></param>
            <param name="value"></param>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityNameComponent.PhoneticCode">
            <summary>
            Gets or sets the phonetic code of the reference term
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityNameComponent.PhoneticAlgorithmKey">
            <summary>
            Gets or sets the identifier of the phonetic code
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityNameComponent.PhoneticAlgorithm">
            <summary>
            Gets or sets the phonetic algorithm
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.EntityRelationship">
            <summary>
            Represents an association between two entities
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityRelationship.#ctor">
            <summary>
            Default constructor for entity relationship
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityRelationship.#ctor(System.Nullable{System.Guid},OpenIZ.Core.Model.Entities.Entity)">
            <summary>
            Entity relationship between <paramref name="source"/> and <paramref name="target"/>
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityRelationship.#ctor(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Entity relationship between <paramref name="source"/> and <paramref name="target"/>
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityRelationship.TargetEntityKey">
            <summary>
            The target of the association
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityRelationship.TargetEntity">
            <summary>
            Target entity reference
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityRelationship.RelationshipTypeKey">
            <summary>
            Association type key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityRelationship.InversionIndicator">
            <summary>
            The inversion indicator
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityRelationship.RelationshipType">
            <summary>
            Gets or sets the association type
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityRelationship.Refresh">
            <summary>
            Refresh this entity
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.EntityTelecomAddress">
            <summary>
            Represents an entity telecom address
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityTelecomAddress.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityTelecomAddress.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new entity telecom address with specified use and value
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityTelecomAddress.AddressUseKey">
            <summary>
            Gets or sets the name use key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityTelecomAddress.AddressUse">
            <summary>
            Gets or sets the name use
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityTelecomAddress.Value">
            <summary>
            Gets or sets the value of the telecom address
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityTelecomAddress.Refresh">
            <summary>
            Forces refresh of the delay load properties
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.GenericComponentValues`1">
            <summary>
            A generic class representing components of a larger item (i.e. address, name, etc);
            </summary>
            <typeparam name="TBoundModel"></typeparam>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.GenericComponentValues`1.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.GenericComponentValues`1.#ctor(System.Guid,System.String)">
            <summary>
            Creates a generic component value with the specified classifier
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.GenericComponentValues`1.#ctor(System.String)">
            <summary>
            Constructor with the specified identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.GenericComponentValues`1.ComponentTypeKey">
            <summary>
            Component type key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.GenericComponentValues`1.ComponentType">
            <summary>
            Gets or sets the type of address component
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.GenericComponentValues`1.Value">
            <summary>
            Gets or sets the value of the name component
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.GenericComponentValues`1.Refresh">
            <summary>
            Forces refreshing of delay load properties
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.ManufacturedMaterial">
            <summary>
            Manufactured material
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.ManufacturedMaterial.#ctor">
            <summary>
            Creates a new manufactured material
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.ManufacturedMaterial.LotNumber">
            <summary>
            Gets or sets the lot number of the manufactured material
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.Material">
            <summary>
            Represents a material 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Material.#ctor">
            <summary>
            Material ctor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Material.Quantity">
            <summary>
            The base quantity of the object in the units. This differs from quantity on the relationship
            which is a /per ... 
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Material.FormConceptKey">
            <summary>
            Gets or sets the form concept's key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Material.QuantityConceptKey">
            <summary>
            Gets or sets the quantity concept ref
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Material.FormConcept">
            <summary>
            Gets or sets the concept which dictates the form of the material (solid, liquid, capsule, injection, etc.)
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Material.QuantityConcept">
            <summary>
            Gets or sets the concept which dictates the unit of measure for a single instance of this entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Material.ExpiryDate">
            <summary>
            Gets or sets the expiry date of the material
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Material.IsAdministrative">
            <summary>
            True if the material is simply administrative
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Material.Refresh">
            <summary>
            Forces refresh of the delay load properties
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.Organization">
            <summary>
            Organization entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Organization.#ctor">
            <summary>
            Organization ctor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Organization.IndustryConceptKey">
            <summary>
            Gets or sets the industry concept key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Organization.IndustryConcept">
            <summary>
            Gets or sets the industry in which the organization operates
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Organization.Refresh">
            <summary>
            Forces reload of delay load properties
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.Person">
            <summary>
            Represents an entity which is a person
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Person.#ctor">
            <summary>
            Person constructor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Person.DateOfBirth">
            <summary>
            Gets or sets the person's date of birth
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Person.DateOfBirthPrecision">
            <summary>
            Gets or sets the precision ofthe date of birth
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Person.LanguageCommunication">
            <summary>
            Gets the person's languages of communication
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Person.AsSecurityUser">
            <summary>
            Gets the security user account associated with this person if applicable
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.PersonLanguageCommunication">
            <summary>
            Represents a single preferred communication method for the entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.PersonLanguageCommunication.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.PersonLanguageCommunication.#ctor(System.String,System.Boolean)">
            <summary>
            Language communication code ctor with specified code and preference
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.PersonLanguageCommunication.LanguageCode">
            <summary>
            Gets or sets the language code
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.PersonLanguageCommunication.IsPreferred">
            <summary>
            Gets or set the user's preference indicator
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.Place">
            <summary>
            An entity which is a place where healthcare services are delivered
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Place.#ctor">
            <summary>
            Place ctor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Place.ClassConceptKey">
            <summary>
            Gets or sets the class concept key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Place.IsMobile">
            <summary>
            True if location is mobile
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Place.Lat">
            <summary>
            Gets or sets the latitude
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Place.Lng">
            <summary>
            Gets or sets the longitude
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Place.Services">
            <summary>
            Gets the services
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.PlaceService">
            <summary>
            Represents a service for a place
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.PlaceService.ServiceSchedule">
            <summary>
            The schedule that the service is offered
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.PlaceService.ServiceConceptKey">
            <summary>
            Gets or sets the service concept key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.PlaceService.ServiceConcept">
            <summary>
            Gets or sets the service concept
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.PlaceService.Refresh">
            <summary>
            Refresh the delay load properties
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.EntityLoader.EntitySource">
            <summary>
            Delay loader class
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.EntityLoader.EntitySource.DummyEntitySource">
            <summary>
            Dummy entity source
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.EntitySource.DummyEntitySource.Get``1(System.Nullable{System.Guid})">
            <summary>
            Gets the specified object
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.EntitySource.DummyEntitySource.Get``1(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Gets the specified object
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.EntitySource.DummyEntitySource.GetRelations``1(System.Nullable{System.Guid},System.Nullable{System.Decimal})">
            <summary>
            Gets the specified relations
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.EntitySource.DummyEntitySource.Query``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Query 
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.EntityLoader.EntitySource.m_provider">
            <summary>
            Delay load provider
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.EntitySource.#ctor(OpenIZ.Core.Model.EntityLoader.IEntitySourceProvider)">
            <summary>
            Delay loader ctor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.EntityLoader.EntitySource.Current">
            <summary>
            Gets the current delay loader
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.EntitySource.Get``1(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Get the specified object / version
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.EntitySource.Get``1(System.Nullable{System.Guid})">
            <summary>
            Get the current version of the specified object
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.EntityLoader.EntitySource.Provider">
            <summary>
            Gets the current entity source provider
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.EntityLoader.IEntitySourceProvider">
            <summary>
            Delay load provider
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.IEntitySourceProvider.Get``1(System.Nullable{System.Guid})">
            <summary>
            Get the specified object
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.IEntitySourceProvider.Get``1(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Get the specified object
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.IEntitySourceProvider.Query``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Query the specified data from the delay load provider
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.IEntitySourceProvider.GetRelations``1(System.Nullable{System.Guid},System.Nullable{System.Decimal})">
            <summary>
            Get relationships
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.IdentifiedData">
            <summary>
            Represents data that is identified by a key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.IdentifiedData.IsDelayLoadEnabled">
            <summary>
            True if the class is currently loading associations when accessed
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.IdentifiedData.SetDelayLoad(System.Boolean)">
            <summary>
            Set delay load
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.IdentifiedData.Key">
            <summary>
            The internal primary key value of the entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.IdentifiedData.ShouldSerializeKey">
            <summary>
            True if key should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenIZ.Core.Model.IdentifiedData.Type">
            <summary>
            Gets the type
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.IdentifiedData.DelayLoad``1(System.Nullable{System.Guid},``0)">
            <summary>
            Get associated entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.IdentifiedData.Refresh">
            <summary>
            Force reloading of delay load properties
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.IdentifiedData.ModifiedOn">
            <summary>
            Gets or sets the modified on time
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.IdentifiedData.Tag">
            <summary>
            Gets a tag which changes whenever the object is updated
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.IdentifiedData.Clone">
            <summary>
            Clone the specified data
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.IdentifiedData.GetLocked">
            <summary>
            Clone the specified data
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Interfaces.IBaseEntityData">
            <summary>
            Represents base entity data
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IBaseEntityData.CreatedByKey">
            <summary>
            Gets or sets the creator of the data
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IBaseEntityData.ObsoletedByKey">
            <summary>
            Gets or sets teh obsoletor of the data
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IBaseEntityData.CreationTime">
            <summary>
            Gets or sets the time when the data was created
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IBaseEntityData.ObsoletionTime">
            <summary>
            Gets or sets the time with the data was obsoleted.
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Interfaces.IIdentifiedEntity">
            <summary>
            Identified entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IIdentifiedEntity.Key">
            <summary>
            Gets the identifier for the entity
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Interfaces.ISimpleAssociation">
            <summary>
            Represents bound relational data
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.ISimpleAssociation.SourceEntityKey">
            <summary>
            Gets or sets the source entity key
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Interfaces.ISecurable">
            <summary>
            Represents a data model class which can be used as a securable
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Interfaces.ISecurable.Mask">
            <summary>
            True if the object is masked
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Interfaces.IVersionedAssociation">
            <summary>
            Versioned relationship
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IVersionedAssociation.EffectiveVersionSequenceId">
            <summary>
            Effective version sequence
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IVersionedAssociation.ObsoleteVersionSequenceId">
            <summary>
            Obsolete version sequence
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Interfaces.IVersionedEntity">
            <summary>
            Versioned entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IVersionedEntity.VersionSequence">
            <summary>
            Gets the version sequence
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IVersionedEntity.VersionKey">
            <summary>
            Gets the version key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IVersionedEntity.PreviousVersionKey">
            <summary>
            Gets the previous version's key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IVersionedEntity.PreviousVersion">
            <summary>
            Gets the previous version
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.ClassMap">
            <summary>
            Class mapping
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassMap.DomainType">
            <summary>
            Gets the domain CLR type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassMap.ModelType">
            <summary>
            Gets the model CLR type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassMap.ModelClass">
            <summary>
            Gets or sets the model class for the mapper
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassMap.DomainClass">
            <summary>
            Gets or sets the domain class for the mapper
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassMap.CollapseKey">
            <summary>
            Gets or sets the association maps which are used for collapsing keys
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassMap.Property">
            <summary>
            Gets or sets the property maps
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassMap.ParentDomainProperty">
            <summary>
            Gets or sets the base proeprty 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ClassMap.TryGetCollapseKey(System.String,OpenIZ.Core.Model.Map.CollapseKey@)">
            <summary>
            Try to get a collapse key
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ClassMap.TryGetModelProperty(System.String,OpenIZ.Core.Model.Map.PropertyMap@)">
            <summary>
            Try to get a property map 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ClassMap.Validate">
            <summary>
            Validate the class map
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ClassMap.TryGetDomainProperty(System.String,OpenIZ.Core.Model.Map.PropertyMap@)">
            <summary>
            Try to get a property map 
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.ClassRedirect">
            <summary>
            Class redirect on mapper
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassRedirect.FromType">
            <summary>
            Gets the domain CLR type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassRedirect.FromClass">
            <summary>
            Gets or sets the model class for the mapper
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassRedirect.Property">
            <summary>
            Gets or sets the property maps
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.CollapseKey">
            <summary>
            Association map
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.CollapseKey.PropertyName">
            <summary>
            Gets or sets the name of the property can be collapsed if a key is used
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.CollapseKey.KeyName">
            <summary>
            Gets or sets the key in the domain model which "PropertyName" can be collapsed
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.CollapseKey.Validate(System.Type)">
            <summary>
            Validate the collapse key
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.MapUtil">
            <summary>
            Map utility
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Map.MapUtil.s_flavorValidation">
            <summary>
            Flavor validation
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Map.MapUtil.s_wireMaps">
            <summary>
            Maps from wire format to real format
            Key - string in the format {FROM}>{TO}
            Value - MethodInfo of the method that will perform the operation to convert
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.MapUtil.FindConverter(System.Type,System.Type,System.Type)">
            <summary>
            Find the converter for the types specified
            </summary>
            <param name="scanType">The type to scan in</param>
            <param name="sourceType">The source type</param>
            <param name="destType">The destination type</param>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.MapUtil.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Attempt casting <paramref name="value"/> to <paramref name="destType"/> placing the result 
            in <paramref name="result"/>
            </summary>
            <remarks>If null is passed as the <paramref name="resultDetails"/> parameter then a <see cref="T:MARC.Everest.Exceptions.VocabularyException"/>
            will be thrown whenever vocabulary cannot be cast.</remarks>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.ModelExpressionVisitor">
            <summary>
            Model conversion visitor is used to convert a lambda expression based on the business model 
            into a domain model lamda expression
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.ModelExpressionVisitor.LambdaCorrectionVisitor">
            <summary>
            A small visitor which corrects lambda expressions to skip over associative
            classes
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.LambdaCorrectionVisitor.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Creates a new instance of the lambda correction visitor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.LambdaCorrectionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visit the node
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.LambdaCorrectionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visit a binary method
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.#ctor(OpenIZ.Core.Model.Map.ModelMapper,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            Model conversion visitor 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visit an expression
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.VisitConvert(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Remove unnecessary convert statement
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.VisitLambdaGeneric(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visit a lambda expression
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visit method call
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.VisitExpressionList(System.Collections.Generic.ICollection{System.Linq.Expressions.Expression})">
            <summary>
            Visit each expression in the args
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visit a binary method
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visit parameter
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visit member access, converts member expression type and name
            </summary>
            <param name="node">The node to be converted</param>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.ModelMap">
            <summary>
            Model map format class
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMap.Load(System.IO.Stream)">
            <summary>
            Creates the specified model mmap
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ModelMap.Class">
            <summary>
            Gets or sets the class mapping
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMap.GetModelClassMap(System.Type)">
            <summary>
            Get a class map for the specified type
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMap.Validate">
            <summary>
            Validate the map
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMap.GetModelClassMap(System.Type,System.Type)">
            <summary>
            Get the model class map between two types
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.ModelMapEventArgs">
            <summary>
            Represents model mapping event arguments
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ModelMapEventArgs.Key">
            <summary>
            Domain object
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ModelMapEventArgs.ModelObject">
            <summary>
            Identified data model object
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ModelMapEventArgs.ObjectType">
            <summary>
            Gets or sets the domain object type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ModelMapEventArgs.Cancel">
            <summary>
            Gets or sets a cancel comand
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.ModelMapper">
            <summary>
            Model mapper
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Map.ModelMapper.primitives">
            <summary>
            Primitive types
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.#ctor(System.IO.Stream)">
            <summary>
            Creates a new mapper from source stream
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.Load(System.IO.Stream)">
            <summary>
            Load mapping from a stream
            </summary>
        </member>
        <member name="E:OpenIZ.Core.Model.Map.ModelMapper.MappingToModel">
            <summary>
            Fired anytime any model mapper maps to a model
            </summary>
        </member>
        <member name="E:OpenIZ.Core.Model.Map.ModelMapper.MappedToModel">
            <summary>
            Fired anytime any model mapper maps finished
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.FireMappingToModel(System.Object,System.Guid,OpenIZ.Core.Model.IdentifiedData)">
            <summary>
            Fires the pre map returning whether cancellation is necessary
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.FireMappedToModel(System.Object,System.Guid,OpenIZ.Core.Model.IdentifiedData)">
            <summary>
            Fires that a map has occurred
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.MapModelMember(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Map member 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.ExtractDomainType(System.Type)">
            <summary>
            Extracts a domain type from a generic if needed
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.MapModelType(System.Type)">
            <summary>
            Gets the domain type for the specified model type
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.CreateLambdaMemberAdjustmentExpression(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Create a traversal expression for a lambda expression
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.MapModelExpression``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Convert the specified lambda expression from model into query
            </summary>
            <param name="expression">The expression to be converted</param>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.MapModelInstance``2(``0)">
            <summary>
            Map model instance
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.MapDomainInstance``2(``0,System.Collections.Generic.HashSet{System.Guid})">
            <summary>
            Map model instance
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.OpenIZConvert">
            <summary>
            OpenIZ conversion helper functions
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.NullGuidToByte(System.Nullable{System.Guid})">
            <summary>
            Guid > Byte[]
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.ByteToNullGuid(System.Byte[])">
            <summary>
            Byte[] > GUID
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.GuidToByte(System.Guid)">
            <summary>
            Guid > Byte[]
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.ByteToGuid(System.Byte[])">
            <summary>
            Byte[] > GUID
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.DateTimeToDateTimeOffset(System.DateTime)">
            <summary>
            DT > DTO
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.DateTimeOffsetToDateTime(System.DateTimeOffset)">
            <summary>
            DTO > DT
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.PropertyMap">
            <summary>
            Represents a property map
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.PropertyMap.ModelName">
            <summary>
            Gets or sets the name of the property in the model
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.PropertyMap.DomainName">
            <summary>
            Gets or sets the name of the property in the domain model
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.PropertyMap.Via">
            <summary>
            Identifies the route 
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.PropertyMap.DontLoad">
            <summary>
            When this property is a via then traverse this
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.PropertyMap.Aggregate">
            <summary>
            Disaggregation function
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.PropertyMap.OrderBy">
            <summary>
            Order By
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.PropertyMap.SortOrder">
            <summary>
            Gets or sets the sort order
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.PropertyMap.IsAssociative">
            <summary>
            This property doesn't "belong on IMS"
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.PropertyMap.Validate(System.Type,System.Type)">
            <summary>
            Validate the property type
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.SortOrderType">
            <summary>
            Represents sort order
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.ResultDetailType">
            <summary>
            Result detail types
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.ValidationResultDetail">
            <summary>
            Represents a result detail which is a validation result
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ValidationResultDetail.Message">
            <summary>
            Gets or sets the message which caused the error
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ValidationResultDetail.CausedBy">
            <summary>
            Gets or sets the exception that caused this error
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ValidationResultDetail.Location">
            <summary>
            Gets or sets the location
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ValidationResultDetail.Level">
            <summary>
            The level of the warning
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Query.NameValueCollection">
            <summary>
            Name value collection
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.NameValueCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.NameValueCollection.#ctor(System.Int32)">
            <summary>
            Name value collection iwth capacity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.NameValueCollection.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.NameValueCollection.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Creates a new name value collection from the kvp array
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.NameValueCollection.ParseQueryString(System.String)">
            <summary>
            Parse a query string
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.NameValueCollection.Add(System.String,System.String)">
            <summary>
            Add the specified key and value to the collection
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.NameValueCollection.ToString">
            <summary>
            Represent as a string
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenIZ.Core.Model.Query.QueryExpressionBuilder">
            <summary>
            Expression visitor which turns a LINQ expression against a query type to an HTTP header
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor">
            <summary>
            Http query expression visitor.
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor.#ctor(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the
            <see cref="!:OpenIZ.Mobile.Core.Interop.Util.HttpQueryExpressionBuilder+HttpQueryExpressionVisitor"/> class.
            </summary>
            <param name="workingDictionary">Working dictionary.</param>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visit a query expression
            </summary>
            <returns>The modified expression list, if any one of the elements were modified; otherwise, returns the original
            expression list.</returns>
            <param name="nodes">The expressions to visit.</param>
            <param name="node">Node.</param>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visit method call
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the member access.
            </summary>
            <returns>The member access.</returns>
            <param name="expr">Expr.</param>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor.VisitLambdaGeneric(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visits the lambda generic.
            </summary>
            <returns>The lambda generic.</returns>
            <param name="node">Node.</param>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visit a binary expression which is in the form of A(operator)B
            </summary>
            <returns>The binary.</returns>
            <param name="node">Node.</param>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor.ExtractValue(System.Linq.Expressions.Expression)">
            <summary>
            Extract a value
            </summary>
            <returns>The value.</returns>
            <param name="access">Access.</param>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor.ExtractPath(System.Linq.Expressions.Expression)">
            <summary>
            Extract the path
            </summary>
            <returns>The path.</returns>
            <param name="access">Access.</param>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.BuildQuery``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Builds the query dictionary .
            </summary>
            <returns>The query.</returns>
            <param name="model">Model.</param>
            <typeparam name="TModel">The 1st type parameter.</typeparam>
        </member>
        <member name="T:OpenIZ.Core.Model.Query.QueryExpressionParser">
            <summary>
            A class which is responsible for translating a series of Query Parmaeters to a LINQ expression
            to be passed to the persistence layer
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionParser.BuildLinqExpression``1(OpenIZ.Core.Model.Query.NameValueCollection)">
            <summary>
            Build a LINQ expression
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionParser.BuildLinqExpression``1(OpenIZ.Core.Model.Query.NameValueCollection,System.String)">
            <summary>
            Build LINQ expression
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Reflection.ReflectionUtil">
            <summary>
            Reflection tools
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Reflection.ReflectionUtil.CopyObjectData``1(``0,``0)">
            <summary>
            Update property data if required
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Reflection.ReflectionUtil.IsActive``1(System.Linq.Expressions.Expression,``0)">
            <summary>
            Create a version filter
            </summary>
            <typeparam name="TDomain"></typeparam>
            <param name="parm"></param>
            <param name="domainInstance"></param>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Reflection.ReflectionUtil.IsActive(System.Linq.Expressions.Expression)">
            <summary>
            Create a version filter
            </summary>
            <typeparam name="TDomain"></typeparam>
            <param name="parm"></param>
            <param name="domainInstance"></param>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Reflection.ReflectionUtil.Aggregate(System.Linq.Expressions.Expression,OpenIZ.Core.Model.Map.AggregationFunctionType)">
            <summary>
            Create aggregation functions
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Reflection.ReflectionUtil.Sort(System.Linq.Expressions.Expression,System.String,OpenIZ.Core.Model.Map.SortOrderType)">
            <summary>
            Create sort expression
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Reflection.ReflectionUtil.GetGenericMethod(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Get generic method
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Roles.Patient">
            <summary>
            Represents an entity which is a patient
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Roles.Patient.#ctor">
            <summary>
            Represents a patient
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Roles.Patient.DeceasedDate">
            <summary>
            Gets or sets the date the patient was deceased
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Roles.Patient.DeceasedDatePrecision">
            <summary>
            Gets or sets the precision of the date of deceased
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Roles.Patient.MultipleBirthOrder">
            <summary>
            Gets or sets the multiple birth order of the patient 
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Roles.Patient.GenderConceptKey">
            <summary>
            Gets or sets the gender concept key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Roles.Patient.GenderConcept">
            <summary>
            Gets or sets the gender concept
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Roles.Patient.Refresh">
            <summary>
            Force a refresh of delay load properties
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Roles.Provider">
            <summary>
            Represents a provider role of a person
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Roles.Provider.#ctor">
            <summary>
            Creates a new provider
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Roles.Provider.ProviderSpecialtyKey">
            <summary>
            Gets or sets the provider specialty key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Roles.Provider.ProviderSpecialty">
            <summary>
            Gets or sets the provider specialty
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Roles.Provider.Refresh">
            <summary>
            Force a refresh of the delay load properties
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Security.SecurityApplication">
            <summary>
            Represents a security application
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityApplication.ApplicationSecret">
            <summary>
            Gets or sets the application secret used for authenticating the application
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityApplication.Name">
            <summary>
            Gets or sets the name of the security device/user/role/devie
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Security.SecurityDevice">
            <summary>
            Represents a security device
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityDevice.DeviceSecret">
            <summary>
            Gets or sets the device secret
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityDevice.Name">
            <summary>
            Gets or sets the name of the security device/user/role/devie
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Security.SecurityEntity">
            <summary>
            Security Entity base class
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityEntity.Policies">
            <summary>
            Policies associated with the entity
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Security.PolicyGrantType">
            <summary>
            Policy grant type
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Security.SecurityPolicy">
            <summary>
            Represents a simply security policy
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityPolicy.Handler">
            <summary>
            Gets or sets the handler which may handle this policy
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityPolicy.Name">
            <summary>
            Gets or sets the name of the policy
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityPolicy.Oid">
            <summary>
            Gets or sets the universal ID
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityPolicy.IsPublic">
            <summary>
            Whether the property is public
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityPolicy.CanOverride">
            <summary>
            Whether the policy can be elevated over
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Security.SecurityPolicyInstance">
            <summary>
            Represents a security policy instance
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Security.SecurityPolicyInstance.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Security.SecurityPolicyInstance.#ctor(OpenIZ.Core.Model.Security.SecurityPolicy,OpenIZ.Core.Model.Security.PolicyGrantType)">
            <summary>
            Creates a new policy instance with the specified policy and grant
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityPolicyInstance.PolicyKey">
            <summary>
            Gets or sets the policy key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityPolicyInstance.Policy">
            <summary>
            The policy
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityPolicyInstance.GrantType">
            <summary>
            Gets or sets whether the policy is a Deny
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Security.SecurityRole">
            <summary>
            Security role
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Security.SecurityRole.#ctor">
            <summary>
            Users in teh group
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityRole.Name">
            <summary>
            Gets or sets the name of the security role
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityRole.Description">
            <summary>
            Description of the role
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityRole.Users">
            <summary>
            Gets or sets the security users in the role
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Security.SecurityUser">
            <summary>
            Security user represents a user for the purpose of security 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Security.SecurityUser.#ctor">
            <summary>
            Roles belonging to the user
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.Email">
            <summary>
            Gets or sets the email address of the user
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.EmailConfirmed">
            <summary>
            Gets or sets whether the email address is confirmed
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.InvalidLoginAttempts">
            <summary>
            Gets or sets the number of invalid login attempts by the user
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.Lockout">
            <summary>
            Gets or sets whether the account is locked out
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.LockoutXml">
            <summary>
            Gets or sets the creation time in XML format
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.PasswordHash">
            <summary>
            Gets or sets whether the password hash is enabled
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.SecurityHash">
            <summary>
            Gets or sets whether the security has is enabled
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.TwoFactorEnabled">
            <summary>
            Gets or sets whether two factor authentication is required
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.UserName">
            <summary>
            Gets or sets the logical user name ofthe user
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.UserPhoto">
            <summary>
            Gets or sets the binary representation of the user's photo
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.Entities">
            <summary>
            Gets the list of entities associated with this security user
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.EntitiesXml">
            <summary>
            Concepts as identifiers for XML purposes only
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.LastLoginTime">
            <summary>
            The last login time
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.LastLoginTimeXml">
            <summary>
            Gets or sets the creation time in XML format
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.Roles">
            <summary>
            Represents roles
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.PhoneNumber">
            <summary>
            Gets or sets the patient's phone number
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.PhoneNumberConfirmed">
            <summary>
            Gets or sets whether the phone number was confirmed
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.UserClass">
            <summary>
            Gets or sets the user class key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.Tag">
            <summary>
            Gets the etag
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.Policies">
            <summary>
            Gets or sets the policies for the user
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Serialization.ModelSerializationBinder">
            <summary>
            Model binding 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Serialization.ModelSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            Bind to type
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.NonVersionedEntityData">
            <summary>
            Updateable entity data which is not versioned
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.NonVersionedEntityData.UpdatedTime">
            <summary>
            Updated time
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.NonVersionedEntityData.UpdatedTimeXml">
            <summary>
            Gets or sets the creation time in XML format
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.NonVersionedEntityData.ModifiedOn">
            <summary>
            Gets the time this item was modified
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.NonVersionedEntityData.UpdatedBy">
            <summary>
            Gets or sets the user that updated this base data
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.NonVersionedEntityData.UpdatedByKey">
            <summary>
            Gets or sets the created by identifier
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.NonVersionedEntityData.ShouldSerializeUpdatedByKey">
            <summary>
            True if key should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.NonVersionedEntityData.Refresh">
            <summary>
            Forces refresh
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.VersionedAssociation`1">
            <summary>
            Represents a relational class which is bound on a version boundary
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.VersionedAssociation`1.EffectiveVersionSequenceId">
            <summary>
            Gets or sets the effective version of this type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.VersionedAssociation`1.ObsoleteVersionSequenceId">
            <summary>
            Gets or sets the obsoleted version identifier
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.VersionedEntityData`1">
            <summary>
            Represents versioned based data, that is base data which has versions
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.VersionedEntityData`1.#ctor">
            <summary>
            Creates a new versioned base data class
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.VersionedEntityData`1.OpenIZ#Core#Model#Interfaces#IVersionedEntity#PreviousVersion">
            <summary>
            Previous version
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.VersionedEntityData`1.Tag">
            <summary>
            Override the ETag
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.VersionedEntityData`1.PreviousVersionKey">
            <summary>
            Gets or sets the previous version key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.VersionedEntityData`1.PreviousVersion">
            <summary>
            Gets or sets the previous version
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.VersionedEntityData`1.VersionKey">
            <summary>
            Gets or sets the key which represents the version of the entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.VersionedEntityData`1.VersionSequence">
            <summary>
            The sequence number of the version (for ordering)
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.VersionedEntityData`1.ToString">
            <summary>
            Represent the versioned data as a string
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.VersionedEntityData`1.Refresh">
            <summary>
            Force bound attributes to reload
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Exceptions.ModelMapValidationException">
            <summary>
            Represents a validation exception of a model map
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Exceptions.ModelMapValidationException.#ctor(System.Collections.Generic.IEnumerable{OpenIZ.Core.Model.Map.ValidationResultDetail})">
            <summary>
            Creates a new model validation exception
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Exceptions.ModelMapValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{OpenIZ.Core.Model.Map.ValidationResultDetail})">
            <summary>
            Creates a new model validation exception
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Exceptions.ModelValidationException">
            <summary>
            Model validation exception
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Exceptions.ModelValidationException.#ctor(System.Collections.Generic.IEnumerable{OpenIZ.Core.Model.Map.ValidationResultDetail})">
            <summary>
            Creates a new model validation exception
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Exceptions.ModelValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{OpenIZ.Core.Model.Map.ValidationResultDetail})">
            <summary>
            Creates a new model validation exception
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Exceptions.ModelValidationException.ValidationDetails">
            <summary>
            The errors from validation
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Exceptions.ModelValidationException.ToString">
            <summary>
            Output model map exception as string
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenIZ.Core.Extensions.BooleanExtensionHandler">
            <summary>
            Boolean extension handler
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Extensions.BooleanExtensionHandler.Name">
            <summary>
            Gets the name of the handler
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.BooleanExtensionHandler.DeSerialize(System.Byte[])">
            <summary>
            Gets the boolean obect from a byte array
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.BooleanExtensionHandler.GetDisplay(System.Object)">
            <summary>
            Get display name
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.BooleanExtensionHandler.Serialize(System.Object)">
            <summary>
            Serialize the data into byte array
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Extensions.DecimalExtensionHandler">
            <summary>
            Extension handler that can handle decimal values
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Extensions.DecimalExtensionHandler.Name">
            <summary>
            Gets the name of the handler
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.DecimalExtensionHandler.DeSerialize(System.Byte[])">
            <summary>
            De-serializes data
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.DecimalExtensionHandler.GetDisplay(System.Object)">
            <summary>
            Get display
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.DecimalExtensionHandler.Serialize(System.Object)">
            <summary>
            Serialize the data
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Extensions.StringExtensionHandler">
            <summary>
            An extension handler that handles strings
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Extensions.StringExtensionHandler.Name">
            <summary>
            Gets the name of the extension handler
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.StringExtensionHandler.DeSerialize(System.Byte[])">
            <summary>
            Parses the string from bytes
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.StringExtensionHandler.GetDisplay(System.Object)">
            <summary>
            Get display representation
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.StringExtensionHandler.Serialize(System.Object)">
            <summary>
            Serialize the value
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Interfaces.IExtensionHandler">
            <summary>
            Extension handler contract
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Interfaces.IExtensionHandler.Name">
            <summary>
            Gets the name of the handler
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Interfaces.IExtensionHandler.DeSerialize(System.Byte[])">
            <summary>
            Represents the data as a .net value
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Interfaces.IExtensionHandler.Serialize(System.Object)">
            <summary>
            Serializes the data 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Interfaces.IExtensionHandler.GetDisplay(System.Object)">
            <summary>
            Gets the display value
            </summary>
        </member>
    </members>
</doc>
